<Project Sdk="Microsoft.NET.Sdk">
	<Import Project="../GSECommon.props" />
	<PropertyGroup Condition="'$(GSE_WINDOWS)' == 'true'">
		<ApplicationManifest>app.manifest</ApplicationManifest>
	</PropertyGroup>
	<!-- Automatically set sysroot for Android if we got ANDROID_NDK_ROOT defined -->
	<!-- Note that this doesn't work for CppCompilerAndLinker, due to the checks for PATH not liking a full path -->
	<PropertyGroup Condition="'$(GSE_ANDROID)' == 'true' And '$(ANDROID_NDK_ROOT)' != ''">
		<NDK_HOST_TRIPLE Condition="$(IsWindowsHost) == 'true'">windows-x86_64</NDK_HOST_TRIPLE>
		<NDK_HOST_TRIPLE Condition="$(IsOSXHost) == 'true'">darwin-x86_64</NDK_HOST_TRIPLE>
		<NDK_HOST_TRIPLE Condition="$(IsLinuxHost) == 'true'">linux-x86_64</NDK_HOST_TRIPLE>
		<SysRoot>$(ANDROID_NDK_ROOT)/toolchains/llvm/prebuilt/$(NDK_HOST_TRIPLE)/sysroot</SysRoot>
		<!-- <CppCompilerAndLinker>$(ANDROID_NDK_ROOT)/toolchains/llvm/prebuilt/$(NDK_HOST_TRIPLE)/bin/clang</CppCompilerAndLinker> -->
	</PropertyGroup>
	<PropertyGroup>
		<OutputPath>$(ProjectDir)../output</OutputPath>
		<OutputType Condition="'$(GSE_WINDOWS)' == 'true'">WinExe</OutputType>
		<OutputType Condition="'$(GSE_WINDOWS)' != 'true'">Exe</OutputType>
	</PropertyGroup>
	<PropertyGroup Condition="'$(GSE_ANDROID)' == 'true'">
		<OutputType>Library</OutputType>
		<NativeLib>Shared</NativeLib>
		<TargetName>libGSE</TargetName>
	</PropertyGroup>
	<ItemGroup>
		<PackageReference Include="ImGui.NET" Version="1.90.1.1" ExcludeAssets="native" />
		<PackageReference Include="SharpCompress" Version="0.36.0" />
		<PackageReference Include="System.IO.Hashing" Version="8.0.0" />
		<PackageReference Include="Microsoft.Windows.CsWin32" Version="0.3.49-beta" PrivateAssets="all" />
		<PackageReference Include="GitInfo" Version="3.3.4" PrivateAssets="all" />
		<ProjectReference Include="$(ProjectDir)../externals/SDL2-CS/SDL2-CS.csproj" />
		<ProjectReference Include="$(ProjectDir)../GSE.Audio/GSE.Audio.csproj" />
		<ProjectReference Include="$(ProjectDir)../GSE.Emu/GSE.Emu.csproj" />
		<ProjectReference Include="$(ProjectDir)../GSE.Input/GSE.Input.csproj" />
		<ProjectReference Condition="'$(GSE_ANDROID)' == 'true'" Include="$(ProjectDir)../GSE.Android/GSE.Android.csproj" />
	</ItemGroup>
	<PropertyGroup>
		<GitDefaultBranch>master</GitDefaultBranch>
	</PropertyGroup>
	<ItemGroup>
		<EmbeddedResource Include="res/MPL-2.0" Visible="false" />
		<EmbeddedResource Include="res/GPL-2.0-only" Visible="false" />
		<EmbeddedResource Include="res/LGPL-2.1-or-later" Visible="false" />
		<EmbeddedResource Include="res/Zlib" Visible="false" />
		<EmbeddedResource Include="res/MIT" Visible="false" />
		<EmbeddedResource Include="res/OFL-1.1" Visible="false" />
		<EmbeddedResource Include="res/NotoSansMono-Medium.ttf" Visible="false" />
	</ItemGroup>
	<!-- Include all the libraries we end up using, yes this has to be here (for DirectPInvoke/NativeLibrary anyways) -->
	<PropertyGroup>
		<CIMGUI_PATH>$(ProjectDir)../externals/runtimes/$(GSE_RID)/$(GSE_LIB_PREFIX)cimgui$(GSE_LIB_EXT)</CIMGUI_PATH>
		<SDL2_PATH>$(ProjectDir)../externals/runtimes/$(GSE_RID)/$(GSE_LIB_PREFIX)SDL2$(GSE_LIB_EXT)</SDL2_PATH>
		<GAMBATTE_PATH>$(ProjectDir)../externals/runtimes/$(GSE_RID)/$(GSE_LIB_PREFIX)gambatte$(GSE_LIB_EXT)</GAMBATTE_PATH>
		<MGBA_PATH>$(ProjectDir)../externals/runtimes/$(GSE_RID)/$(GSE_LIB_PREFIX)mgba$(GSE_LIB_EXT)</MGBA_PATH>
		<NATIVE_HELPER_PATH>$(ProjectDir)../externals/runtimes/$(GSE_RID)/$(GSE_LIB_PREFIX)native_helper$(GSE_LIB_EXT)</NATIVE_HELPER_PATH>
	</PropertyGroup>
	<ItemGroup Condition="'$(GSE_PUBLISH)' == 'true' And '$(GSE_ANDROID)' != 'true'">
		<DirectPInvoke Include="cimgui" />
		<DirectPInvoke Include="SDL2" />
		<DirectPInvoke Include="gambatte" />
		<DirectPInvoke Include="mgba" />
		<DirectPInvoke Include="native_helper" />
		<NativeLibrary Include="$(CIMGUI_PATH)" />
		<NativeLibrary Include="$(SDL2_PATH)" />
		<NativeLibrary Include="$(GAMBATTE_PATH)" />
		<NativeLibrary Include="$(MGBA_PATH)" />
		<NativeLibrary Include="$(NATIVE_HELPER_PATH)" />
	</ItemGroup>
	<ItemGroup Condition="'$(GSE_PUBLISH)' == 'true' And '$(GSE_WINDOWS)' == 'true'">
		<!-- These are needed by SDL -->
		<NativeLibrary Include="gdi32.lib" />
		<NativeLibrary Include="shell32.lib" />
		<NativeLibrary Include="winmm.lib" />
		<NativeLibrary Include="setupapi.lib" />
	</ItemGroup>
	<ItemGroup Condition="'$(GSE_PUBLISH)' == 'true' And '$(GSE_OSX)' == 'true'">
		<!-- More SDL linking madness -->
		<NativeFramework Include="CoreVideo" />
		<NativeFramework Include="Cocoa" />
		<NativeFramework Include="IOKit" />
		<NativeFramework Include="ForceFeedback" />
		<NativeFramework Include="Carbon" />
		<NativeFramework Include="CoreAudio" />
		<NativeFramework Include="AudioToolbox" />
		<NativeFramework Include="AVFoundation" />
		<NativeFramework Include="Foundation" />
		<LinkerArg Include="-Wl,-weak_framework,GameController" />
		<LinkerArg Include="-Wl,-weak_framework,Metal" />
		<LinkerArg Include="-Wl,-weak_framework,QuartzCore" />
		<LinkerArg Include="-Wl,-weak_framework,CoreHaptics" />
		<!-- Needed for Cocoa helper -->
		<LinkerArg Include="-Wl,-weak_framework,UniformTypeIdentifiers" />
	</ItemGroup>
	<PropertyGroup Condition="'$(GSE_PUBLISH)' == 'true' And ('$(GSE_OSX)' == 'true' Or'$(GSE_LINUX)' == 'true' Or '$(GSE_ANDROID)' == 'true')">
		<!-- For some platforms, we need to dynamically link the standard C++ library -->
		<LinkStandardCPlusPlusLibrary>true</LinkStandardCPlusPlusLibrary>
	</PropertyGroup>
	<ItemGroup Condition="'$(GSE_PUBLISH)' != 'true' Or '$(GSE_ANDROID)' == 'true'">
		<Content Include="$(CIMGUI_PATH)">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</Content>
		<Content Include="$(SDL2_PATH)">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</Content>
		<Content Include="$(GAMBATTE_PATH)">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</Content>
		<Content Include="$(MGBA_PATH)">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</Content>
		<Content Include="$(NATIVE_HELPER_PATH)">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</Content>
	</ItemGroup>
	<!-- Gradle doesn't understand we depend on libc++_shared, so we need to manually add it -->
	<PropertyGroup Condition="'$(GSE_ANDROID)' == 'true'">
		<NDK_SYSROOT_TRIPLE Condition="$(GSE_ARM64) == 'true'">aarch64-linux-android</NDK_SYSROOT_TRIPLE>
		<NDK_SYSROOT_TRIPLE Condition="$(GSE_X64) == 'true'">x86_64-linux-android</NDK_SYSROOT_TRIPLE>
		<NDK_SYSROOT_TRIPLE Condition="$(GSE_ARM) == 'true'">arm-linux-androideabi</NDK_SYSROOT_TRIPLE>
	</PropertyGroup>
	<ItemGroup Condition="'$(GSE_ANDROID)' == 'true'">
		<Content Include="$(SysRoot)/usr/lib/$(NDK_SYSROOT_TRIPLE)/libc++_shared.so">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>false</Visible>
		</Content>
	</ItemGroup>
	<!-- Copy libraries over to the Android Java project -->
	<Target Name="AndroidCopyLibraries" Condition="'$(GSE_ANDROID)' == 'true'" AfterTargets="Publish">
		<PropertyGroup>
			<GSE_ANDROID_PROJECT_LIB_DIR Condition="$(GSE_ARM64) == 'true'">$(ProjectDir)../android/app/src/main/libs/arm64-v8a</GSE_ANDROID_PROJECT_LIB_DIR>
			<GSE_ANDROID_PROJECT_LIB_DIR Condition="$(GSE_X64) == 'true'">$(ProjectDir)../android/app/src/main/libs/x86_64</GSE_ANDROID_PROJECT_LIB_DIR>
			<GSE_ANDROID_PROJECT_LIB_DIR Condition="$(GSE_ARM) == 'true'">$(ProjectDir)../android/app/src/main/libs/armeabi-v7a</GSE_ANDROID_PROJECT_LIB_DIR>
		</PropertyGroup>
		<ItemGroup>
			<GSE_PUBLISH_OUTPUT Include="$(PublishDir)**" />
		</ItemGroup>
		<Copy SourceFiles="@(GSE_PUBLISH_OUTPUT)" DestinationFolder="$(GSE_ANDROID_PROJECT_LIB_DIR)" />
	</Target>
</Project>
